projectName "arceye-stage"

set module "stage"

artifact directory "mainSrc" "src/main/java"
artifact directory "mainBin" { "bin/main" mkdir }
artifact directory "testSrc" "src/test/java"
artifact directory "testBin" { "bin/test" mkdir }

artifact pipeline {
	key "classes"
	scandir {
		"src/main/java"
		files
		wildcard "*.java"
		not wildcard "package-info.java"
	}
	regex {
		"\\.java$" ".class"
		rebaseFrom "src/main/java"
		rebaseTo "bin/main"
		exec "compile" {
			"javac"
				"-cp" aux "mainBin"
				"-d" aux "mainBin"
				"-sourcepath" aux "mainSrc"
				source
			loud
		}
	}
}

artifact split "genClasses" {
	"classes"
	tree "actualClasses" {
		"bin/main"
		files
		wildcard "*.class"
	}
}

artifact file "jar" {
	"dist/org.unclesniper.arceye.${module}.jar"
	zip {
		piece {
			from "bin/main"
			"genClasses"
		}
	}
}

goal build require "jar"

artifact tree "testLib" {
	"lib"
	files
	any {
		wildcard "junit-*.jar"
		wildcard "hamcrest-*.jar"
		wildcard "assertj-core-*.jar"
	}
}

artifact artifacts "testClassPath" {
	name "test classpath"
	"testBin"
	"jar"
	"testLib"
}

artifact pipeline {
	key "testClasses"
	scandir {
		"src/test/java"
		files
		wildcard "*.java"
	}
	regex {
		"\\.java$" ".class"
		rebaseFrom "src/test/java"
		rebaseTo "bin/test"
		exec "compile" {
			"javac"
				"-cp" aux "testClassPath" merge
				"-d" aux "testBin"
				"-sourcepath" aux "testSrc"
				source
			loud
		}
	}
}

artifact split "testGenClasses" {
	"testClasses"
	tree "testActualClasses" {
		"bin/test"
		files
		wildcard "*.class"
	}
}

artifact file "testJar" {
	"dist/tests.jar"
	zip {
		piece {
			from "bin/test"
			"testGenClasses"
		}
	}
}

artifact artifacts "junitClassPath" {
	name "JUnit classpath"
	"jar"
	"testJar"
	"testLib"
}

goal test exec "junit" {
	"java"
		"-cp" aux "junitClassPath" merge
		"org.junit.runner.JUnitCore"
		"org.unclesniper.arceye.stage.TestSuite"
	loud
}

goal clean {
	delete "bin"
	delete "dist"
}
